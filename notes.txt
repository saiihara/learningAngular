Dependency injection:
Design pattern that implements inversion of control for resolving independencies

Minification:
Process or removing all unnecessary characters from source code without changing its functionality, making it undereable, cutting out white spaces, curly braces, comas, etc.
Purpose: Reduces the amount of fata transferred to the server
    - Dependency injection in Angular need sto be minification proof 
    - attach $inject property to the function object

 Expressions:
 Something to evaluates (or turns into) to some value {{value}}
    - Processed by Angular that are tied to the scope they are in
    - Excecuted in the context of the scope and has access to properties on $scope
    - Doesnt throw errors
    - Control flow functions are not allowed (e.g if)
    - Accept a filer of a filter chain to format the output

 Interpolation
 Process for evaluating a string literal conraining one or more placeholders which are replaced with values.
    - Message is {{message}}
    - These placeholders are usually expressions
    - provided message "hello" is interpolated into this string: message is hello
    - This is still connected to the original message property
    - Result is automatically updated when placeholder value changes
  

Filters
Changes the output of an expression 
{{"Hello | uppercase}} -> HTML
{{"Hello" | currency: arg1 : arg2}}

Our own filters:
We need to define the filtering factory function 
register filter factory with module
inject it with nameFilter

{{"Hello" | custom | uppearcase |currency: arg1 : arg2}}


Digest cycle and watchers

$digest and $apply
    - For code that is not Angular
 

2 way binding
    - Listener for change on input automatically set up by Angular updates prop value on $scope
    - direct update to prop value is automatically updated in HTML
    - Using a watcher

1 way binding {{prop}}
    - the direct prop value is automatically updated in HTML
    - watcher stays

1 time binding {{::prop}}
    - the initialized value is automatically updated in the HTML
    - the watcher is removed the HTML never updates again

Ng-repeat
A directive that comes with Angular that extends the functionality of HTML elements its applied to
    - watches the entire colection as a whole and re-redners the view with the updated data
    - similar to for each
    - "item in x"
    - also has an $index: numeric index of the item in the loop

Filtered ng-repeat
array.prototype.filter: 
    - the filter method creates a new array with all emenets that pass the test implemented by the provided function
    - var new = arr.filter(callback[, thisArg])
                                    optional

    
